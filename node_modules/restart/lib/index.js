/*
 * Copyright (c) 2018-present Kriasoft | MIT License
 */

const fs = require('fs');
const path = require('path');
const cp = require('child_process');

const script = fs.readFileSync(path.resolve(__dirname, './run.js'), 'utf8');

let server;
let timeout;

function spawn(config) {
  return cp.spawn(
    'node',
    [
      ...(Array.isArray(config.require)
        ? config.require
        : (config.require && [config.require]) || []
      ).reduce((acc, x) => [...acc, '--require', x], []),

      '--eval',
      script.replace('%ENTRY%', config.entry),
    ],
    {
      stdio: ['pipe', 'inherit', 'inherit'],
    },
  );
}

const next = (() => {
  const pool = [];
  return config => {
    clearTimeout(timeout);
    timeout = setTimeout(() => {
      while (pool.length < 3) {
        pool.push(spawn(config));
      }
    }, 1000);
    return pool.length ? pool.shift() : spawn(config);
  };
})();

function restart(config) {
  if (server) server.kill('SIGINT');
  server = next(config);
  server.stdin.write('load');
}

process.on('exit', code => {
  clearTimeout(timeout);
  process.exit(code);
});

module.exports = restart;
